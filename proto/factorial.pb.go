// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: proto/factorial.proto

package factorial

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//  CalculateRequest is request with numbers for which should be calculating factorial
type CalculateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers []int64 `protobuf:"varint,1,rep,packed,name=Numbers,proto3" json:"Numbers,omitempty"` // Value into Numbers shouldn't be negative
}

func (x *CalculateRequest) Reset() {
	*x = CalculateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_factorial_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateRequest) ProtoMessage() {}

func (x *CalculateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_factorial_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateRequest.ProtoReflect.Descriptor instead.
func (*CalculateRequest) Descriptor() ([]byte, []int) {
	return file_proto_factorial_proto_rawDescGZIP(), []int{0}
}

func (x *CalculateRequest) GetNumbers() []int64 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

// CalculateResult is response with resulted data
type CalculateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputNumber     int64  `protobuf:"varint,1,opt,name=InputNumber,proto3" json:"InputNumber,omitempty"`        // InputNumber is number which added by CalculateRequest
	FactorialResult string `protobuf:"bytes,2,opt,name=FactorialResult,proto3" json:"FactorialResult,omitempty"` // Result for input nuber converted to string
}

func (x *CalculateResult) Reset() {
	*x = CalculateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_factorial_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateResult) ProtoMessage() {}

func (x *CalculateResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_factorial_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateResult.ProtoReflect.Descriptor instead.
func (*CalculateResult) Descriptor() ([]byte, []int) {
	return file_proto_factorial_proto_rawDescGZIP(), []int{1}
}

func (x *CalculateResult) GetInputNumber() int64 {
	if x != nil {
		return x.InputNumber
	}
	return 0
}

func (x *CalculateResult) GetFactorialResult() string {
	if x != nil {
		return x.FactorialResult
	}
	return ""
}

var File_proto_factorial_proto protoreflect.FileDescriptor

var file_proto_factorial_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x22, 0x2c, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0x5d, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x53, 0x0a, 0x09, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x09,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_factorial_proto_rawDescOnce sync.Once
	file_proto_factorial_proto_rawDescData = file_proto_factorial_proto_rawDesc
)

func file_proto_factorial_proto_rawDescGZIP() []byte {
	file_proto_factorial_proto_rawDescOnce.Do(func() {
		file_proto_factorial_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_factorial_proto_rawDescData)
	})
	return file_proto_factorial_proto_rawDescData
}

var file_proto_factorial_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_factorial_proto_goTypes = []interface{}{
	(*CalculateRequest)(nil), // 0: factorial.CalculateRequest
	(*CalculateResult)(nil),  // 1: factorial.CalculateResult
}
var file_proto_factorial_proto_depIdxs = []int32{
	0, // 0: factorial.Factorial.Calculate:input_type -> factorial.CalculateRequest
	1, // 1: factorial.Factorial.Calculate:output_type -> factorial.CalculateResult
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_factorial_proto_init() }
func file_proto_factorial_proto_init() {
	if File_proto_factorial_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_factorial_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_factorial_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_factorial_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_factorial_proto_goTypes,
		DependencyIndexes: file_proto_factorial_proto_depIdxs,
		MessageInfos:      file_proto_factorial_proto_msgTypes,
	}.Build()
	File_proto_factorial_proto = out.File
	file_proto_factorial_proto_rawDesc = nil
	file_proto_factorial_proto_goTypes = nil
	file_proto_factorial_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FactorialClient is the client API for Factorial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FactorialClient interface {
	// Calculate should be make async actions result should be returned asap
	Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (Factorial_CalculateClient, error)
}

type factorialClient struct {
	cc grpc.ClientConnInterface
}

func NewFactorialClient(cc grpc.ClientConnInterface) FactorialClient {
	return &factorialClient{cc}
}

func (c *factorialClient) Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (Factorial_CalculateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Factorial_serviceDesc.Streams[0], "/factorial.Factorial/Calculate", opts...)
	if err != nil {
		return nil, err
	}
	x := &factorialCalculateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Factorial_CalculateClient interface {
	Recv() (*CalculateResult, error)
	grpc.ClientStream
}

type factorialCalculateClient struct {
	grpc.ClientStream
}

func (x *factorialCalculateClient) Recv() (*CalculateResult, error) {
	m := new(CalculateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FactorialServer is the server API for Factorial service.
type FactorialServer interface {
	// Calculate should be make async actions result should be returned asap
	Calculate(*CalculateRequest, Factorial_CalculateServer) error
}

// UnimplementedFactorialServer can be embedded to have forward compatible implementations.
type UnimplementedFactorialServer struct {
}

func (*UnimplementedFactorialServer) Calculate(*CalculateRequest, Factorial_CalculateServer) error {
	return status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}

func RegisterFactorialServer(s *grpc.Server, srv FactorialServer) {
	s.RegisterService(&_Factorial_serviceDesc, srv)
}

func _Factorial_Calculate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CalculateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FactorialServer).Calculate(m, &factorialCalculateServer{stream})
}

type Factorial_CalculateServer interface {
	Send(*CalculateResult) error
	grpc.ServerStream
}

type factorialCalculateServer struct {
	grpc.ServerStream
}

func (x *factorialCalculateServer) Send(m *CalculateResult) error {
	return x.ServerStream.SendMsg(m)
}

var _Factorial_serviceDesc = grpc.ServiceDesc{
	ServiceName: "factorial.Factorial",
	HandlerType: (*FactorialServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Calculate",
			Handler:       _Factorial_Calculate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/factorial.proto",
}
